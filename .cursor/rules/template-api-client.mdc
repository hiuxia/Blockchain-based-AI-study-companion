# API Client Template

```typescript
// Base types for API responses
export interface ApiErrorResponse {
  detail: string | Record<string, any>[];
}

// Source types
export interface SourceFile {
  id: string;
  filename: string;
  content_type: string;
  created_at?: string;
}

// Process types
export interface ProcessTask {
  task_id: string;
}

export interface ProcessResult {
  task_id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  result: {
    markdown: string;
    summary_id: string;
    created_at: string;
  } | null;
  error: string | null;
}

// History types
export interface ConversationHistory {
  id: string;
  conversation: string;
  created_at: string;
}

// API client class
const API_BASE_URL = 'http://localhost:8000';

export class ApiClient {
  // Health check
  static async checkHealth(): Promise<{ status: string }> {
    return this.get('/health');
  }

  // Source endpoints
  static async uploadSource(file: File): Promise<SourceFile> {
    const formData = new FormData();
    formData.append('file', file);
    
    return this.postFormData('/sources', formData);
  }

  static async getSources(): Promise<SourceFile[]> {
    return this.get('/sources');
  }

  static async getSource(sourceId: string): Promise<SourceFile> {
    return this.get(`/sources/${sourceId}`);
  }

  // Process endpoints
  static async startProcessing(sourceIds: string[], llmModel: string): Promise<ProcessTask> {
    return this.post('/process', { source_ids: sourceIds, llm_model: llmModel });
  }

  static async getProcessResult(taskId: string): Promise<ProcessResult> {
    return this.get(`/process/results/${taskId}`);
  }

  // History endpoints
  static async saveConversation(conversation: string): Promise<ConversationHistory> {
    return this.post('/history', { conversation });
  }

  static async getConversationHistories(): Promise<ConversationHistory[]> {
    return this.get('/history');
  }

  static async getConversationHistory(historyId: string): Promise<ConversationHistory> {
    return this.get(`/history/${historyId}`);
  }

  // Helper methods
  private static async get<T>(path: string): Promise<T> {
    const response = await fetch(`${API_BASE_URL}${path}`);
    return this.handleResponse<T>(response);
  }

  private static async post<T>(path: string, data: Record<string, any>): Promise<T> {
    const response = await fetch(`${API_BASE_URL}${path}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });
    return this.handleResponse<T>(response);
  }

  private static async postFormData<T>(path: string, formData: FormData): Promise<T> {
    const response = await fetch(`${API_BASE_URL}${path}`, {
      method: 'POST',
      body: formData,
    });
    return this.handleResponse<T>(response);
  }

  private static async handleResponse<T>(response: Response): Promise<T> {
    const data = await response.json();
    
    if (!response.ok) {
      const error = data as ApiErrorResponse;
      throw new Error(typeof error.detail === 'string' 
        ? error.detail 
        : JSON.stringify(error.detail));
    }
    
    return data as T;
  }
} 