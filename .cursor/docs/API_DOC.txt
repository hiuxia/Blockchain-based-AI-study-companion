一、基础信息
服务启动端口： 8000
基础 URL：
http://localhost:8000
二、健康检查
GET /health
URL
http://localhost:8000/health
用途
检查后端服务是否正常运行。
请求参数
无
响应示例
{
  "status": "healthy"
}
HTTP 状态码
200 OK

三、文件管理（Sources）
所有文件管理接口均以 /sources 前缀。
3.1 上传 PDF 文件
POST /sources
URL
http://localhost:8000/sources
用途
上传单个 PDF 文件，保存到服务器，并在数据库中生成记录。
请求 Header
Content-Type: multipart/form-data
请求 Body (form-data)
字段名	必填	类型	描述
file	是	file	待上传的 PDF 文件
成功响应
状态码： 200 OK
Body：
{
  "id": "e8f5c5a2-1a2b-4d3e-9f0a-1234567890ab",
  "filename": "example.pdf",
  "content_type": "application/pdf"
}
示例 (curl.exe)

curl.exe -X POST "http://localhost:8000/sources" `
  -F "file=@C:/path/to/example.pdf"

3.2 查询所有已上传文件
GET /sources
URL
http://localhost:8000/sources
用途
获取所有上传文件的元数据列表。
请求参数
无
成功响应
状态码： 200 OK
Body (示例)：
[
  {
    "id": "e8f5c5a2-1a2b-4d3e-9f0a-1234567890ab",
    "filename": "example.pdf",
    "content_type": "application/pdf",
    "created_at": "2025-04-16T09:00:00.000000"
  },
  {
    "id": "a1b2c3d4-5e6f-7a8b-9c0d-1234567890ef",
    "filename": "report.pdf",
    "content_type": "application/pdf",
    "created_at": "2025-04-16T09:05:00.000000"
  }
]

3.3 查询单个文件元数据
GET /sources/{source_id}
URL
http://localhost:8000/sources/{source_id}
路径参数
参数名	必填	类型	描述
source_id	是	string	文件记录的唯一 ID
成功响应
状态码： 200 OK
Body (示例)：
{
  "id": "e8f5c5a2-1a2b-4d3e-9f0a-1234567890ab",
  "filename": "example.pdf",
  "content_type": "application/pdf",
  "created_at": "2025-04-16T09:00:00.000000"
}
404 响应
{
  "detail": "Source {source_id} not found"
}

四、文档处理任务（Processing）
所有处理任务接口均以 /process 前缀。返回 Markdown 摘要并存入数据库。
4.1 提交处理任务
POST /process
URL
http://localhost:8000/process
用途
启动后台任务：读取指定 PDF，拆分文本并调用 LLM 生成 Markdown 摘要，保存摘要并记录任务状态。
请求 Header
Content-Type: application/json
请求 Body (JSON)
{
  "source_ids": [
    "e8f5c5a2-1a2b-4d3e-9f0a-1234567890ab"
  ],
  "llm_model": "gemini-flash"
}
字段名	必填	类型	描述
source_ids	是	string array	已上传文件的 id 列表
llm_model	是	string	要使用的 LLM 模型（如 "gemini-flash" 或 "llama-scout"）
成功响应
状态码： 202 Accepted
Body：
{
  "task_id": "5d3b8fed-9c4a-4e2d-8f1b-234567890abc"
}

示例 (curl.exe)
curl.exe -X POST "http://localhost:8000/process" `
  -H "Content-Type: application/json" `
  -d "{\"source_ids\":[\"e8f5c5a2-1a2b-4d3e-9f0a-1234567890ab\"],\"llm_model\":\"gemini-flash\"}"

4.2 查询任务结果
GET /process/results/{task_id}
URL
http://localhost:8000/process/results/{task_id}
用途
根据 task_id 查询处理任务的当前状态与结果。
路径参数
参数名	必填	类型	描述
task_id	是	string	任务的唯一 ID
成功响应
状态码： 200 OK
Body：
{
  "task_id": "5d3b8fed-9c4a-4e2d-8f1b-234567890abc",
  "status": "completed",
  "result": {
    "markdown": "# 文档摘要标题\n- 要点1\n- 要点2",
    "summary_id": "a1b2c3d4-5e6f-7a8b-9c0d-1234567890ef",
    "created_at": "2025-04-16T10:00:00.000000"
  },
  "error": null
}

字段	类型	描述
task_id	string	任务 ID
status	string	任务状态：pending/processing/completed/failed
result	object/null	任务完成时的结果；如果失败则为 null
markdown	string	生成的 Markdown 摘要
summary_id	string	对应摘要记录 ID
created_at	string (ISO)	摘要生成时间
error	string/null	失败时的错误消息，否则为 null
示例 (curl.exe)
curl.exe "http://localhost:8000/process/results/5d3b8fed-9c4a-4e2d-8f1b-234567890abc"

五、对话历史管理（History）
所有会话历史接口均以 /history 前缀。
5.1 保存对话历史
POST /history
URL
http://localhost:8000/history
用途
将用户与 LLM 的完整对话文本保存为历史记录。
请求 Header
Content-Type: application/json
请求 Body (JSON)
{
  "conversation": "用户: 你好\nLLM: 你好，有什么可以帮您？\n用户: 介绍一下文档摘要功能\nLLM: …"
}

成功响应
状态码： 200 OK
Body：
{
  "id": "f1e2d3c4-b5a6-7890-1234-56789abcdef0",
  "conversation": "用户: 你好\nLLM: 你好，有什么可以帮您？\n…",
  "created_at": "2025-04-16T10:05:00.000000"
}

示例 (Invoke-RestMethod)
$body = @{ conversation = "用户: 你好`nLLM: 你好，有什么可以帮您？" } | ConvertTo-Json
Invoke-RestMethod -Uri "http://localhost:8000/history" -Method Post -ContentType "application/json" -Body $body

5.2 查询所有历史记录
GET /history
URL
http://localhost:8000/history
用途
获取所有已保存的对话历史记录列表。
成功响应
状态码： 200 OK
Body (示例)：
[
  {
    "id": "f1e2d3c4-b5a6-7890-1234-56789abcdef0",
    "conversation": "用户: 你好\nLLM: 你好，有什么可以帮您？",
    "created_at": "2025-04-16T10:05:00.000000"
  },
  {
    "id": "0a1b2c3d-4e5f-6789-0123-456789abcdef",
    "conversation": "…第二条对话历史…",
    "created_at": "2025-04-16T11:00:00.000000"
  }
]

示例 (curl.exe)
curl.exe "http://localhost:8000/history"

5.3 查询指定历史记录
GET /history/{history_id}
URL
http://localhost:8000/history/{history_id}

用途
根据 id 获取一条对话历史的详细内容。
路径参数
参数名	类型	描述
history_id	string	历史记录的唯一 ID

成功响应
状态码： 200 OK
Body (示例)：
{
  "id": "f1e2d3c4-b5a6-7890-1234-56789abcdef0",
  "conversation": "用户: 你好\nLLM: 你好，有什么可以帮您？",
  "created_at": "2025-04-16T10:05:00.000000"
}

404 响应
{
  "detail": "History not found"
}

示例 (curl.exe)
curl.exe "http://localhost:8000/history/f1e2d3c4-b5a6-7890-1234-56789abcdef0"

六、错误响应示例（通用）
400 Bad Request：请求体缺少字段或 JSON 格式错误
{
  "detail": [
    {
      "loc": ["body","source_ids"],
      "msg": "field required",
      "type": "value_error.missing"
    }
  ]
}

404 Not Found：指定的 source_id、task_id 或 history_id 不存在
{
  "detail": "Source e8f5c5a2-... not found"
}

500 Internal Server Error：后端处理异常
{
  "detail": "Unexpected error message..."
}

说明：
前端请将所有请求都指向 http://localhost:8000，并使用示例中对应的 HTTP 方法、URL 路径、Header 与 Body。
对于需要提供 ID（如 source_id、task_id、history_id）的接口，请使用实际由后端返回的 UUID。
接口均支持 CORS，前端可跨域调用。
推荐在开发阶段使用 --reload 模式启动服务，以实时加载代码改动：
uvicorn app.main:app --reload